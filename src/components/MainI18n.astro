---
// Create an object with translations of the page.
// A translation is identified by its 'reference' frontmatter value: pages that have the same value are considered translations.
// If there are translations of the page, the TranslationsBanner is shown.
// Because astro.glob() and getCollections are only available inside .astro files, the logic can't be easily moved to utility function.
// The benefit of having the logic inside this component is that the translations only need to be searched once for all the places where they are used (head and TranslationsBanner).
import {site} from '@src/consts'
import { getLocaleFromUrl } from '@i18n/utilities';
import { uiStrings } from '@i18n/uiStrings';
import Html from "@components/Html.astro";
import TranslationsBanner from "@components/TranslationsBanner.astro";
import TranslationLinks from "@components/TranslationLinks.astro";
import Header from "@components/Header.astro";
import { getAbsolutePostPath, getRelativePostPath } from '@utilities/getPostPath';
import getPublishedPosts from '@utilities/getPublishedPosts';
import type { CommonFrontmatter } from '@src/types';

interface Props {
	frontmatter: CommonFrontmatter,
	collection: string
}
export interface TranslationLink{
	absoluteURL: string,
	relativeURL: string,
	locale: string,
	label: string
}

const
	{frontmatter, collection} = Astro.props,
	reference: string = frontmatter?.reference || '';

let translationsAvailable = []
let translationLinks: TranslationLink[] = []

if (reference){
	if (collection === 'pages'){
		// The current page is not part of a collection
		const allPages = await Astro.glob('../pages/**/*.{md,mdx}')
		translationsAvailable = allPages
			.filter(({ frontmatter }) => {
				return frontmatter.reference !== null && frontmatter.reference === reference
			})
			.filter(page => {
				return getLocaleFromUrl(page.url) !== Astro.currentLocale
			})
		for (const translation of translationsAvailable){
			const
				locale = getLocaleFromUrl(translation.url),
				relativeURL = translation.url || '/',
				absoluteURL = `${site}${relativeURL}`;
			const link = {
				absoluteURL: absoluteURL,
				relativeURL: relativeURL,
				locale: locale,
				label: uiStrings[locale][Astro.currentLocale]
			}
			translationLinks.push(link)
		}
	}
	else{
		// The current page is part of a collection
		const translationsSlugs = (await getPublishedPosts('', collection, ''))
			.filter((post)=> post.data.reference === reference)
			.filter(function(post){ return getLocaleFromUrl(post.slug) !== Astro.currentLocale })
			.map(post => (post.slug))

		for (const slug of translationsSlugs){
			const locale = getLocaleFromUrl(slug)
			const link = {
				absoluteURL: getAbsolutePostPath(locale, collection, slug),
				relativeURL: getRelativePostPath(locale, collection, slug),
				locale: locale,
				label: uiStrings[locale][Astro.currentLocale]
			}
			translationLinks.push(link)
		}
	}
}
---

<Html {frontmatter}>
	{translationLinks.map((translation) => ( 
		<link rel="alternate" hreflang={translation.locale} href={translation.absoluteURL} slot="head" />
	))}
</Html>
  <Header>
		{translationLinks.length > 0 &&
			<TranslationsBanner>
				<TranslationLinks {translationLinks} />
			</TranslationsBanner>
		}
	</Header>
	<slot/>
		{translationLinks.length > 0 &&
			<footer>
				<TranslationLinks {translationLinks} />
			</footer>
		}
</Html>